# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aq9eAPSSjC1gHcFIA4XH0zImay4cx_TV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FormatStrFormatter
from sklearn.linear_model import LinearRegression

#Doing Cleaning Data

#Load csv data
best_movie_by_year_df=pd.read_csv('Best Movie by Year Netflix.csv')
best_movies_df=pd.read_csv('Best Movies Netflix.csv')
best_show_by_year_df=pd.read_csv('Best Show by Year Netflix.csv')
best_shows_df=pd.read_csv('Best Shows Netflix.csv')
raw_credits_df=pd.read_csv('raw_credits.csv')
raw_titles_df=pd.read_csv('raw_titles.csv')

#Preview the first few rows of each file
files={
    'Best Movie by Year':best_movie_by_year_df,
    'Best Movies': best_movies_df,
    'Best Show by Year': best_show_by_year_df,
    'Best Shows': best_shows_df,
    'Credits': raw_credits_df,
    'Titles':raw_titles_df
}

#Display
for name, df in files.items():
  print(f"---{name}---")
  print(df.head(),"\n")

#List of files to drop the "seasons" column if it exists
drop_seasons_in = ['raw_titles.csv','Best Shows Netflix.csv','Best Show by Year Neflix.csv']

#Checking Missing Value
for name, df in files.items():
  print(f"--- {name} Missing Values ---")
  print(df.isnull().sum())

  # Drop the "seasons" column if it exists
  if name in drop_seasons_in and 'seasons' in df.columns:
    df = df.drop(columns=['seasons'])
    print(f"'{name}' - 'seasons' column dropped.")

  #drop rows with any missing values
  files[name]=df.dropna()
  print(f"{name} - After dropping missing rows: {files[name].shape[0]} rows remaining\n")


#remove duplicate
print("\nRemoving Duplicates")
for name, df in files.items():
  files[name] = df.drop_duplicates()
  print(f"{name} - After removing Duplicates: {files[name].shape[0]} rows remaining")

#save cleaning data
for name, df in files.items():
  df.to_csv(f"/content/cleaned_{name.replace(' ','_').lower()}.csv", index = False)

#Question a)

#Load cleaned files
movies = pd.read_csv('cleaned_best_movies.csv')
movies_by_year = pd.read_csv('cleaned_best_movie_by_year.csv')

#merge the cleaned movie files on TITLE and RELEASE YEAR
merged_movies = pd.merge(movies, movies_by_year, on=['TITLE', 'RELEASE_YEAR'], suffixes=('', '_by_year'))
print("Merged Movies Data:", merged_movies.head())

#create region column based on MAIN_PRODUCTION
def assign_region(main_production):
    asia = ['IN', 'JP', 'KR', 'CN', 'HK', 'TH', 'ID']
    europe = ['GB', 'FR', 'DE', 'IT', 'ES', 'BE', 'NL', 'NO', 'SE', 'FI', 'UA', 'PL', 'HU', 'LT']
    us = ['US']
    if main_production in asia:
        return 'Asia'
    elif main_production in europe:
        return 'Europe'
    elif main_production in us:
        return 'US'
    else:
        return 'Others'

# Apply the region mapping
merged_movies['REGION'] = merged_movies['MAIN_PRODUCTION'].apply(assign_region)
print("\nMovies with Region Column:", merged_movies[['TITLE', 'MAIN_PRODUCTION', 'REGION']].head())

#Group by Region and calculate average score and average number of votes
region_analysis = merged_movies.groupby('REGION').agg({
    'SCORE': 'mean',
    'NUMBER_OF_VOTES': 'mean'
}).rename(columns={'SCORE': 'Average_Score', 'NUMBER_OF_VOTES': 'Average_Votes'}).reset_index()

# Display the results
print("\nAverage Score and Votes by Region:")
print(region_analysis)

# Setting style for seaborn
sns.set(style="whitegrid")

# Plotting Average Score by Region
plt.figure(figsize=(7, 4))
sns.lineplot(data=region_analysis, x='REGION', y='Average_Score', marker='X')
plt.title("Average Score by Region")
plt.xlabel("Region")
plt.ylabel("Average Score")
plt.show()

print("\n")
# Plotting Average Votes by Region
plt.figure(figsize=(7, 4))
sns.lineplot(data=region_analysis, x='REGION', y='Average_Votes', marker='X')
plt.title("Average Votes by Region")
plt.xlabel("Region")
plt.ylabel("Average Votes")
plt.show()

# Setting style for seaborn
sns.set(style="whitegrid")

# Create a figure with 1 row and 2 columns for subplots
fig, axes = plt.subplots(1, 2, figsize=(14, 5))

# Plotting Average Score by Region on the first subplot
sns.lineplot(data=region_analysis, x='REGION', y='Average_Score', marker='X', ax=axes[0])
axes[0].set_title("Average Score by Region")
axes[0].set_xlabel("Region")
axes[0].set_ylabel("Average Score")

# Plotting Average Votes by Region on the second subplot
sns.lineplot(data=region_analysis, x='REGION', y='Average_Votes', marker='X', ax=axes[1])
axes[1].set_title("Average Votes by Region")
axes[1].set_xlabel("Region")
axes[1].set_ylabel("Average Votes")

# Adjust layout for better spacing
plt.tight_layout()
plt.show()

#Question b

#Calculate popularity metrics by genre
genre_analysis = merged_movies.groupby('MAIN_GENRE').agg(
    Average_Score=('SCORE', 'mean'),
    Average_Votes=('NUMBER_OF_VOTES', 'mean')
).reset_index()

# Sort by engagement to identify top and bottom genres
genre_analysis = genre_analysis.sort_values(by=['Average_Score', 'Average_Votes'], ascending=[False, False])

# Display the resulting DataFrame for inspection
print(genre_analysis)

#visualization
plt.figure(figsize=(12, 6))
sns.lineplot(data=genre_analysis, x='MAIN_GENRE', y='Average_Score', palette='coolwarm', marker='X')
plt.title("Average Score by Genre")
plt.xlabel("Genre")
plt.ylabel("Average Score")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(data=genre_analysis, x='MAIN_GENRE', y='Average_Votes', palette='coolwarm', marker='X')
plt.title("Average Votes by Genre")
plt.xlabel("Genre")
plt.ylabel("Average Votes")
plt.xticks(rotation=45)
plt.show()

# Visualization of both Average Score and Average Votes by Genre in a single plot with dual y-axes
plt.figure(figsize=(14, 7))

# Plotting Average Score with a line and marker on the primary y-axis
sns.lineplot(data=genre_analysis, x='MAIN_GENRE', y='Average_Score', marker='o', label="Average Score", color='b')

# Creating a secondary y-axis
ax2 = plt.gca().twinx()

# Plotting Average Votes with a line and marker on the secondary y-axis
sns.lineplot(data=genre_analysis, x='MAIN_GENRE', y='Average_Votes', marker='X', ax=ax2, label="Average Votes", color='r')

# Adding title and labels
plt.title("Average Score and Votes by Genre")
plt.xlabel("Genre")
plt.xticks(rotation=45)
plt.gca().set_ylabel("Average Score")
ax2.set_ylabel("Average Votes")

# Show legend for both y-axes
plt.legend(loc='upper left')
ax2.legend(loc='upper right')

# Adjust layout for better spacing
plt.tight_layout()
plt.show()

# Visualization of both Average Score and Average Votes by Genre in a single plot with dual y-axes
fig, ax1 = plt.subplots(figsize=(14, 7))

# Plotting Average Score with a line and marker on the primary y-axis
line1, = ax1.plot(genre_analysis['MAIN_GENRE'], genre_analysis['Average_Score'], marker='o', color='b', label="Average Score")
ax1.set_ylabel("Average Score", color='b')
ax1.tick_params(axis='y', labelcolor='b')

# Creating a secondary y-axis
ax2 = ax1.twinx()

# Plotting Average Votes with a line and marker on the secondary y-axis
line2, = ax2.plot(genre_analysis['MAIN_GENRE'], genre_analysis['Average_Votes'], marker='X', color='r', label="Average Votes")
ax2.set_ylabel("Average Votes", color='r')
ax2.tick_params(axis='y', labelcolor='r')

# Adding title and labels
plt.title("Average Score and Votes by Genre")
plt.xlabel("Genre")
plt.xticks(rotation=45)

# Combining legends manually
ax1.legend([line1, line2], ["Average Score", "Average Votes"], loc='upper right')

# Adjust layout for better spacing
plt.tight_layout()
plt.show()

#Question C

# Load the data
credits_df = pd.read_csv('cleaned_credits.csv')
titles_df = pd.read_csv('cleaned_titles.csv')

# Merge data on 'id'
merged_df = pd.merge(credits_df, titles_df, on='id', how='inner')

# Filter only actor roles
actors_df = merged_df[merged_df['role'] == 'ACTOR']

# Define Asian countries list for filtering
asian_countries = ['IN', 'CN', 'JP', 'KR', 'SG', 'MY', 'TH', 'PH', 'VN', 'ID']

# Identify if the production country is in Asia
actors_df['is_asian'] = actors_df['production_countries'].apply(
    lambda x: any(country in x for country in asian_countries) if isinstance(x, str) else False
)

# Calculate top 5 global and Asian actors
global_top_actors = actors_df['name'].value_counts().head(5)
asian_top_actors = actors_df[actors_df['is_asian']]['name'].value_counts().head(5)

# Plotting
sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Plot Top 5 Global Actors
sns.barplot(x=global_top_actors.values, y=global_top_actors.index, ax=axes[0], palette="viridis")
axes[0].set_title("Top 5 Global Actors by Frequency")
axes[0].set_xlabel("Number of Appearances")
axes[0].set_ylabel("Actor/Actress")

# Plot Top 5 Asian Actors
sns.barplot(x=asian_top_actors.values, y=asian_top_actors.index, ax=axes[1], palette="plasma")
axes[1].set_title("Top 5 Asian Actors by Frequency")
axes[1].set_xlabel("Number of Appearances")
axes[1].set_ylabel("Actor/Actress")

# Adjust layout and show
plt.tight_layout()
plt.show()

# Load the CSV files
credits_df = pd.read_csv('cleaned_credits.csv')
titles_df = pd.read_csv('cleaned_titles.csv')

# Filter for actors only in the credits data
actors_df = credits_df[credits_df['role'] == 'ACTOR']

# Count appearances of each actor/actress
top_actors = actors_df['name'].value_counts().head(5)

# Plot the top 5 actors and actresses
plt.figure(figsize=(10, 6))
top_actors.plot(kind='bar', color='skyblue')
plt.title('Top 5 Actors and Actresses by Frequency of Appearances')
plt.xlabel('Actor/Actress')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.show()

# Define a list of Asian country codes
asian_countries = ['CN', 'IN', 'JP', 'KR', 'HK', 'ID', 'TH', 'PH', 'MY', 'VN', 'SG', 'TW', 'LK', 'BD', 'PK']

# Filter titles for Asian production countries
titles_df['production_countries'] = titles_df['production_countries'].fillna('[]')
asian_titles_df = titles_df[titles_df['production_countries'].apply(lambda x: any(country in x for country in asian_countries))]

# Merge Asian titles with the credits data
asian_actors_df = pd.merge(asian_titles_df[['id']], actors_df, left_on='id', right_on='id')

# Calculate the top 5 Asian actors and actresses
top_asian_actors = asian_actors_df['name'].value_counts().head(5)

# Plotting the top 5 Asian actors and actresses
plt.figure(figsize=(10, 6))
top_asian_actors.plot(kind='bar', color='salmon')
plt.title('Top 5 Asian Actors and Actresses by Frequency of Appearances')
plt.xlabel('Actor/Actress')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.show()

#Question d

# Load the datasets
movies_df = pd.read_csv('cleaned_best_movies.csv')
shows_df = pd.read_csv('cleaned_best_shows.csv')

# Group by genre and calculate the average score and number of votes for movies
movies_genre_analysis = movies_df.groupby('MAIN_GENRE').agg(
    avg_score=('SCORE', 'mean'),
    avg_votes=('NUMBER_OF_VOTES', 'mean'),
    count=('TITLE', 'count')
).sort_values(by='avg_score', ascending=False)

# Group by genre and calculate the average score and number of votes for shows
shows_genre_analysis = shows_df.groupby('MAIN_GENRE').agg(
    avg_score=('SCORE', 'mean'),
    avg_votes=('NUMBER_OF_VOTES', 'mean'),
    count=('TITLE', 'count')
).sort_values(by='avg_score', ascending=False)

# Group by production country and calculate the average score and number of votes for movies
movies_country_analysis = movies_df.groupby('MAIN_PRODUCTION').agg(
    avg_score=('SCORE', 'mean'),
    avg_votes=('NUMBER_OF_VOTES', 'mean'),
    count=('TITLE', 'count')
).sort_values(by='avg_score', ascending=False)

# Group by production country and calculate the average score and number of votes for shows
shows_country_analysis = shows_df.groupby('MAIN_PRODUCTION').agg(
    avg_score=('SCORE', 'mean'),
    avg_votes=('NUMBER_OF_VOTES', 'mean'),
    count=('TITLE', 'count')
).sort_values(by='avg_score', ascending=False)

# Set the aesthetics for the plots
sns.set(style="whitegrid")

# Create a figure with subplots
fig, axes = plt.subplots(3, 2, figsize=(16, 18))

# Plot 1: Average Movie Scores by Genre
sns.barplot(x=movies_genre_analysis.index, y=movies_genre_analysis['avg_score'], palette='Blues_d', ax=axes[0, 0])
axes[0, 0].set_title('Average Movie Scores by Genre')
axes[0, 0].set_xlabel('Genre')
axes[0, 0].set_ylabel('Average Score')
axes[0, 0].tick_params(axis='x', rotation=45)

# Plot 2: Average Movie Votes by Genre
sns.barplot(x=movies_genre_analysis.index, y=movies_genre_analysis['avg_votes'], palette='Greens_d', ax=axes[0, 1])
axes[0, 1].set_title('Average Movie Votes by Genre')
axes[0, 1].set_xlabel('Genre')
axes[0, 1].set_ylabel('Average Votes')
axes[0, 1].tick_params(axis='x', rotation=45)

# Plot 3: Average Show Scores by Genre
sns.barplot(x=shows_genre_analysis.index, y=shows_genre_analysis['avg_score'], palette='Oranges_d', ax=axes[1, 0])
axes[1, 0].set_title('Average Show Scores by Genre')
axes[1, 0].set_xlabel('Genre')
axes[1, 0].set_ylabel('Average Score')
axes[1, 0].tick_params(axis='x', rotation=45)

# Plot 4: Average Show Votes by Genre
sns.barplot(x=shows_genre_analysis.index, y=shows_genre_analysis['avg_votes'], palette='Purples_d', ax=axes[1, 1])
axes[1, 1].set_title('Average Show Votes by Genre')
axes[1, 1].set_xlabel('Genre')
axes[1, 1].set_ylabel('Average Votes')
axes[1, 1].tick_params(axis='x', rotation=45)

# Plot 5: Average Movie Scores by Production Country
sns.barplot(x=movies_country_analysis.index, y=movies_country_analysis['avg_score'], palette='Reds_d', ax=axes[2, 0])
axes[2, 0].set_title('Average Movie Scores by Production Country')
axes[2, 0].set_xlabel('Production Country')
axes[2, 0].set_ylabel('Average Score')
axes[2, 0].tick_params(axis='x', rotation=45)

# Plot 6: Average Show Scores by Production Country
sns.barplot(x=shows_country_analysis.index, y=shows_country_analysis['avg_score'], palette='Blues_d', ax=axes[2, 1])
axes[2, 1].set_title('Average Show Scores by Production Country')
axes[2, 1].set_xlabel('Production Country')
axes[2, 1].set_ylabel('Average Score')
axes[2, 1].tick_params(axis='x', rotation=45)

# Adjust layout for better spacing
plt.tight_layout()
plt.show()

#Question e

# Load the titles dataset
titles_df = pd.read_csv('cleaned_titles.csv')

# Convert 'RELEASE_YEAR' to numeric and filter valid years
titles_df['release_year'] = pd.to_numeric(titles_df['release_year'], errors='coerce')
titles_df = titles_df.dropna(subset=['release_year'])

# Group by release year and genre, counting the number of titles per genre each year
genre_trend = titles_df.groupby(['release_year', 'genres']).size().unstack(fill_value=0)

# Plot the trend for the top 5 genres over time
top_genres = genre_trend.sum().sort_values(ascending=False).head(5).index
genre_trend[top_genres].plot(figsize=(12, 6))
plt.title('Top 5 Genre Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Number of Titles')
plt.legend(title='Genres')
plt.grid(True)
plt.show()

# Predict the number of titles in 2023 using linear regression
# For each top genre
for genre in top_genres:
    # Prepare data
    X = genre_trend.index.values.reshape(-1, 1)  # Year as X
    y = genre_trend[genre].values  # Titles released as y

    # Fit linear regression
    model = LinearRegression()
    model.fit(X, y)

    # Predict for 2023
    year_2023 = np.array([[2023]])
    pred_2023 = model.predict(year_2023)
    print(f"Predicted number of {genre} titles in 2023: {pred_2023[0]:.2f}")